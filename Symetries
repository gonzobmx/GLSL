// https://inspirnathan.com/posts/48-shadertoy-tutorial-part-2


vec3 getBackgroundColor(vec2 uv) {
  uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>
  vec3 gradientStartColor = vec3(1., 0., 1.);
  vec3 gradientEndColor = vec3(0., 1., 1.);
  return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top
}

float sdfCircle(vec2 uv, float r, vec2 offset) {
  float x = uv.x - offset.x;
  float y = uv.y - offset.y;

  return length(vec2(x, y)) - r;
}

float sdfSquare(vec2 uv, float size, vec2 offset) {
  float x = uv.x - offset.x;
  float y = uv.y - offset.y;

  return max(abs(x), abs(y)) - size;
}
// smooth min
float smin(float a, float b, float k) {
  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);
  return mix(b, a, h) - k*h*(1.0-h);
}

// smooth max
float smax(float a, float b, float k) {
  return -smin(-a, -b, k);
}


//--SYMETRIES----//

float opSymX(vec2 p, float r)
{
  p.x = abs(p.x);
  float d1= sdfCircle(p, 0.03, vec2(sin(iTime)*0.2, sin(iTime)*0.1));
  float d2 = sdfSquare(p, 0.03, vec2(sin(iTime)*-0.2, sin(iTime)*-0.1));
  float end = smin(d1, d2, 0.05);
  return end;
}


float opSymY(vec2 p, float r)
{
  p.y = abs(p.y);
  return sdfCircle(p, r, vec2(0, 0.2));
}

float opSymXY(vec2 p, float r)
{
  p = abs(p);
  return sdfCircle(p, r, vec2(0.2));
}

//instancing----

float opRepLim(vec2 p, float r, float c, vec2 l)
{
  vec2 q = p-c*clamp(round(p/c),-l,l);
  return opSymX(q, r);
}


//--scene drawing-----
vec3 drawScene(vec2 uv) {
  vec3 col = getBackgroundColor(uv);
 
  float res; // result
  
  
  // union| interaecting |substracting |xor
  //res = min(d1,d2);
  //res = max(d1,d2);
  //res = max(-d1,d2);
  //res = max(min(d1, d2), -max(d1, d2));


 
//symetry
  //res = opSymX(uv, 0.4);
  
//instancing  
   res = opRepLim(uv, 0.05, 0.15, vec2(2, 2));
  
  res = step(0., res); // Same as res > 0. ? 1. : 0.;

  col = mix(vec3(1,0,0), col, res);
  return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 uv = fragCoord/iResolution.xy; // <0, 1>
  uv -= 0.5; // <-0.5,0.5>
  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio

  vec3 col = drawScene(uv);

  fragColor = vec4(col,1.0); // Output to screen
}
